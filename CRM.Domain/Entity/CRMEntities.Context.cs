//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRM.Domain
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    internal partial class CRMEntities : DbContext
    {
        public CRMEntities()
            : base("name=CRMEntities")
        {
            InsuranceException = Set<InsuranceException>();
            v_CallCenterUsers = Set<v_CallCenterUsers>();
            v_ClientLogins = Set<v_ClientLogins>();
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Insurance> Insurance { get; set; }
        public virtual DbSet<InputAttributes> InputAttributes { get; set; }
        public virtual DbSet<v_Questions> v_Questions { get; set; }
        public virtual DbSet<v_OfficeLocations> v_OfficeLocations { get; set; }
        internal virtual DbSet<InsuranceException> InsuranceException { get; set; }
        public virtual DbSet<v_TargetTypeFilters> v_TargetTypeFilters { get; set; }
        internal virtual DbSet<v_CallCenterUsers> v_CallCenterUsers { get; set; }
        public virtual DbSet<v_Clients> v_Clients { get; set; }
        public virtual DbSet<UserLogins> v_UserLogins { get; set; }
        internal virtual DbSet<v_ClientLogins> v_ClientLogins { get; set; }
        public virtual DbSet<v_QuesInputRuleFilters> v_QuesInputRuleFilters { get; set; }
        public virtual DbSet<v_QuesInputQualifyingRules> v_QuesInputQualifyingRules { get; set; }
        public virtual DbSet<v_QuesQualifyingRules> v_QuesQualifyingRules { get; set; }
        public virtual DbSet<v_QuesRulesAndFilters> v_QuesRulesAndFilters { get; set; }
        public virtual DbSet<v_QuestionInputs> v_QuestionInputs { get; set; }
        public virtual DbSet<v_Dispositions> v_Dispositions { get; set; }
        public virtual DbSet<v_Verticals> v_Verticals { get; set; }
        public virtual DbSet<v_VerticalUsers> v_VerticalUsers { get; set; }
        public virtual DbSet<CustomerStrollHealth> CustomerStrollHealth { get; set; }
    
        public virtual int sp_UpdateTaxonomy(Nullable<int> userId, Nullable<int> taxTypeId, string taxType, string value)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var taxTypeIdParameter = taxTypeId.HasValue ?
                new ObjectParameter("TaxTypeId", taxTypeId) :
                new ObjectParameter("TaxTypeId", typeof(int));
    
            var taxTypeParameter = taxType != null ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTaxonomy", userIdParameter, taxTypeIdParameter, taxTypeParameter, valueParameter);
        }
    
        public virtual ObjectResult<sp_ValidateCredentials_Result> sp_ValidateCredentials(Nullable<int> verticalId, string userName, string password)
        {
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidateCredentials_Result>("sp_ValidateCredentials", verticalIdParameter, userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Client> sp_ClientSearch(Nullable<int> clientId, string companyName, string email, string phone, Nullable<int> pageNum, Nullable<int> maxRows, Nullable<bool> showAll)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("PageNum", pageNum) :
                new ObjectParameter("PageNum", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Client>("sp_ClientSearch", clientIdParameter, companyNameParameter, emailParameter, phoneParameter, pageNumParameter, maxRowsParameter, showAllParameter);
        }
    
        public virtual ObjectResult<sp_GetListOfProviders_Result> sp_GetListOfProviders(Nullable<int> verticalId, Nullable<int> userId, string state, string zipCode, Nullable<int> insuranceId, Nullable<int> vCLRelId)
        {
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var vCLRelIdParameter = vCLRelId.HasValue ?
                new ObjectParameter("VCLRelId", vCLRelId) :
                new ObjectParameter("VCLRelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListOfProviders_Result>("sp_GetListOfProviders", verticalIdParameter, userIdParameter, stateParameter, zipCodeParameter, insuranceIdParameter, vCLRelIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_CredentialsExist(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_CredentialsExist", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_UpdateClientLoginUser(Nullable<int> clientId, Nullable<int> userId, string firstName, string lastName, string userName, string password, string email, string phone, Nullable<bool> enabled)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateClientLoginUser", clientIdParameter, userIdParameter, firstNameParameter, lastNameParameter, userNameParameter, passwordParameter, emailParameter, phoneParameter, enabledParameter);
        }
    
        public virtual int sp_UpdateCustomerAnswer(Nullable<int> userId, Nullable<int> clientInputTypeRelId, string answer)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var clientInputTypeRelIdParameter = clientInputTypeRelId.HasValue ?
                new ObjectParameter("ClientInputTypeRelId", clientInputTypeRelId) :
                new ObjectParameter("ClientInputTypeRelId", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCustomerAnswer", userIdParameter, clientInputTypeRelIdParameter, answerParameter);
        }
    
        public virtual ObjectResult<sp_VerticalQuestions_Result> sp_VerticalQuestions(Nullable<int> verticalId, Nullable<int> clientVerticalRelId, Nullable<int> officeLocationId, Nullable<int> customerId, Nullable<bool> showAll)
        {
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var clientVerticalRelIdParameter = clientVerticalRelId.HasValue ?
                new ObjectParameter("ClientVerticalRelId", clientVerticalRelId) :
                new ObjectParameter("ClientVerticalRelId", typeof(int));
    
            var officeLocationIdParameter = officeLocationId.HasValue ?
                new ObjectParameter("OfficeLocationId", officeLocationId) :
                new ObjectParameter("OfficeLocationId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VerticalQuestions_Result>("sp_VerticalQuestions", verticalIdParameter, clientVerticalRelIdParameter, officeLocationIdParameter, customerIdParameter, showAllParameter);
        }
    
        public virtual ObjectResult<Client> sp_UpdateClient(Nullable<int> clientId, string firstName, string lastName, string email, string phone, string address, string address2, string city, string stateAbbr, string zipCode, Nullable<decimal> latitude, Nullable<decimal> longitude, string companyName, string forwardPhone, string forwardPhone2, string website, string description, string code, string userName, string password, string notes, Nullable<bool> allowEmailTransfer, Nullable<bool> conciergeModel, string agentNotification, string verticalIds, Nullable<bool> enabled)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateAbbrParameter = stateAbbr != null ?
                new ObjectParameter("StateAbbr", stateAbbr) :
                new ObjectParameter("StateAbbr", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var forwardPhoneParameter = forwardPhone != null ?
                new ObjectParameter("ForwardPhone", forwardPhone) :
                new ObjectParameter("ForwardPhone", typeof(string));
    
            var forwardPhone2Parameter = forwardPhone2 != null ?
                new ObjectParameter("ForwardPhone2", forwardPhone2) :
                new ObjectParameter("ForwardPhone2", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var allowEmailTransferParameter = allowEmailTransfer.HasValue ?
                new ObjectParameter("AllowEmailTransfer", allowEmailTransfer) :
                new ObjectParameter("AllowEmailTransfer", typeof(bool));
    
            var conciergeModelParameter = conciergeModel.HasValue ?
                new ObjectParameter("ConciergeModel", conciergeModel) :
                new ObjectParameter("ConciergeModel", typeof(bool));
    
            var agentNotificationParameter = agentNotification != null ?
                new ObjectParameter("AgentNotification", agentNotification) :
                new ObjectParameter("AgentNotification", typeof(string));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Client>("sp_UpdateClient", clientIdParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, addressParameter, address2Parameter, cityParameter, stateAbbrParameter, zipCodeParameter, latitudeParameter, longitudeParameter, companyNameParameter, forwardPhoneParameter, forwardPhone2Parameter, websiteParameter, descriptionParameter, codeParameter, userNameParameter, passwordParameter, notesParameter, allowEmailTransferParameter, conciergeModelParameter, agentNotificationParameter, verticalIdsParameter, enabledParameter);
        }
    
        public virtual ObjectResult<sp_CallCenterSearch_Result> sp_CallCenterSearch(Nullable<int> userId, string lastName, string phone, string email, Nullable<int> pageNum, Nullable<int> maxRows, Nullable<bool> showAll)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("PageNum", pageNum) :
                new ObjectParameter("PageNum", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CallCenterSearch_Result>("sp_CallCenterSearch", userIdParameter, lastNameParameter, phoneParameter, emailParameter, pageNumParameter, maxRowsParameter, showAllParameter);
        }
    
        public virtual ObjectResult<v_CallCenterUsers> sp_UpdateCallCenterUser(Nullable<int> userId, Nullable<int> userTypeId, string firstName, string lastName, string phone, string email, string userName, string password, Nullable<int> five9AgentId, string verticalIds, Nullable<bool> enabled)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var five9AgentIdParameter = five9AgentId.HasValue ?
                new ObjectParameter("Five9AgentId", five9AgentId) :
                new ObjectParameter("Five9AgentId", typeof(int));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<v_CallCenterUsers>("sp_UpdateCallCenterUser", userIdParameter, userTypeIdParameter, firstNameParameter, lastNameParameter, phoneParameter, emailParameter, userNameParameter, passwordParameter, five9AgentIdParameter, verticalIdsParameter, enabledParameter);
        }
    
        public virtual ObjectResult<v_CallCenterUsers> sp_UpdateCallCenterUser(Nullable<int> userId, Nullable<int> userTypeId, string firstName, string lastName, string phone, string email, string userName, string password, Nullable<int> five9AgentId, string verticalIds, Nullable<bool> enabled, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var five9AgentIdParameter = five9AgentId.HasValue ?
                new ObjectParameter("Five9AgentId", five9AgentId) :
                new ObjectParameter("Five9AgentId", typeof(int));
    
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<v_CallCenterUsers>("sp_UpdateCallCenterUser", mergeOption, userIdParameter, userTypeIdParameter, firstNameParameter, lastNameParameter, phoneParameter, emailParameter, userNameParameter, passwordParameter, five9AgentIdParameter, verticalIdsParameter, enabledParameter);
        }
    
        public virtual ObjectResult<Customer> sp_GetDuplicates(Nullable<int> userId, string phone, string email)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("sp_GetDuplicates", userIdParameter, phoneParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_CustomerSearch_Result> sp_CustomerSearch(Nullable<int> userId, Nullable<int> loginUserId, string email, string phone, string lastName, Nullable<int> verticalId, Nullable<bool> transfered, Nullable<int> pageNum, Nullable<int> maxRows)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var transferedParameter = transfered.HasValue ?
                new ObjectParameter("Transfered", transfered) :
                new ObjectParameter("Transfered", typeof(bool));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("PageNum", pageNum) :
                new ObjectParameter("PageNum", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomerSearch_Result>("sp_CustomerSearch", userIdParameter, loginUserIdParameter, emailParameter, phoneParameter, lastNameParameter, verticalIdParameter, transferedParameter, pageNumParameter, maxRowsParameter);
        }
    
        public virtual ObjectResult<Customer> sp_UpdateCustomer(Nullable<int> customerId, Nullable<int> verticalId, string firstName, string lastName, string email, string phone, string city, string stateAbbr, string zipCode, Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<int> officeLocationId, Nullable<int> dispositionId, Nullable<decimal> distance, string leadSource, Nullable<int> fireHostLeadId, Nullable<int> five9AgentId, string notes)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateAbbrParameter = stateAbbr != null ?
                new ObjectParameter("StateAbbr", stateAbbr) :
                new ObjectParameter("StateAbbr", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var officeLocationIdParameter = officeLocationId.HasValue ?
                new ObjectParameter("OfficeLocationId", officeLocationId) :
                new ObjectParameter("OfficeLocationId", typeof(int));
    
            var dispositionIdParameter = dispositionId.HasValue ?
                new ObjectParameter("DispositionId", dispositionId) :
                new ObjectParameter("DispositionId", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(decimal));
    
            var leadSourceParameter = leadSource != null ?
                new ObjectParameter("LeadSource", leadSource) :
                new ObjectParameter("LeadSource", typeof(string));
    
            var fireHostLeadIdParameter = fireHostLeadId.HasValue ?
                new ObjectParameter("FireHostLeadId", fireHostLeadId) :
                new ObjectParameter("FireHostLeadId", typeof(int));
    
            var five9AgentIdParameter = five9AgentId.HasValue ?
                new ObjectParameter("Five9AgentId", five9AgentId) :
                new ObjectParameter("Five9AgentId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("sp_UpdateCustomer", customerIdParameter, verticalIdParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, cityParameter, stateAbbrParameter, zipCodeParameter, latitudeParameter, longitudeParameter, officeLocationIdParameter, dispositionIdParameter, distanceParameter, leadSourceParameter, fireHostLeadIdParameter, five9AgentIdParameter, notesParameter);
        }
    
        public virtual ObjectResult<Customer> sp_TransferCustomer(Nullable<int> verticalId, Nullable<int> customerId, Nullable<bool> transfered, string patientCoordName, Nullable<int> dispositionId, Nullable<int> vCLRelId)
        {
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var transferedParameter = transfered.HasValue ?
                new ObjectParameter("Transfered", transfered) :
                new ObjectParameter("Transfered", typeof(bool));
    
            var patientCoordNameParameter = patientCoordName != null ?
                new ObjectParameter("PatientCoordName", patientCoordName) :
                new ObjectParameter("PatientCoordName", typeof(string));
    
            var dispositionIdParameter = dispositionId.HasValue ?
                new ObjectParameter("DispositionId", dispositionId) :
                new ObjectParameter("DispositionId", typeof(int));
    
            var vCLRelIdParameter = vCLRelId.HasValue ?
                new ObjectParameter("VCLRelId", vCLRelId) :
                new ObjectParameter("VCLRelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("sp_TransferCustomer", verticalIdParameter, customerIdParameter, transferedParameter, patientCoordNameParameter, dispositionIdParameter, vCLRelIdParameter);
        }
    
        public virtual int sp_UpdateFoceLogin(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateFoceLogin", userIdParameter);
        }
    }
}
